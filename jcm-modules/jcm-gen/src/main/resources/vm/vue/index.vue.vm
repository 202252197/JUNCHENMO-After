<template>
  <div class="fade">
    <el-card class="searchCard">
      <el-form :inline="true" :model="${className}Store.searchForm" class="searchForm" label-position="right"
               label-width="auto" ref="searchFormRef">
        <el-row>
#foreach($column in $columns)
#if($column.query)
#set($dictType=$column.dictType)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if($column.htmlType == "input")
      <el-form-item label="${comment}" prop="${column.javaField}">
        <el-input
          v-model="${className}Store.searchForm.${column.javaField}"
          placeholder="请输入${comment}"
          clearable
          @keyup.enter="refresh"
        />
      </el-form-item>
#elseif(($column.htmlType == "select" || $column.htmlType == "radio") && "" != $dictType)
      <el-form-item label="${comment}" prop="${column.javaField}">
        <el-select v-model="${className}Store.searchForm.${column.javaField}" placeholder="请选择${comment}" clearable>
          <el-option
            v-for="dict in loadDictDataByName('${dictType}')"
            :key="dict.value"
            :label="dict.label"
            :value="dict.value"
          />
        </el-select>
      </el-form-item>
#elseif(($column.htmlType == "select" || $column.htmlType == "radio") && $dictType)
      <el-form-item label="${comment}" prop="${column.javaField}">
        <el-select v-model="${className}Store.searchForm.${column.javaField}" placeholder="请选择${comment}" clearable>
          <el-option label="请选择字典生成" value="" />
        </el-select>
      </el-form-item>
#elseif($column.htmlType == "datetime" && $column.queryType != "BETWEEN")
      <el-form-item label="${comment}" prop="${column.javaField}">
        <el-date-picker clearable
          v-model="${className}Store.searchForm.${column.javaField}"
          type="date"
          value-format="YYYY-MM-DD"
          placeholder="请选择${comment}">
        </el-date-picker>
      </el-form-item>
#elseif($column.htmlType == "datetime" && $column.queryType == "BETWEEN")
      <el-form-item label="${comment}" style="width: 308px">
        <el-date-picker
          v-model="daterange${AttrName}"
          value-format="YYYY-MM-DD"
          type="daterange"
          range-separator="-"
          start-placeholder="开始日期"
          end-placeholder="结束日期"
        ></el-date-picker>
      </el-form-item>
#end
#end
#end
          <div style="margin-left: auto" class="card-search-end">
            <JcmButton :buttonBgColor="layoutSettingStore.getTheme" @click="resetSearchForm(searchFormRef)">
              <template #icon>
                <svg-icon name="擦除" />
              </template>
            </JcmButton>
            <JcmButton :buttonBgColor="layoutSettingStore.getTheme" @click="refresh()">
              <template #icon>
                <svg-icon name="搜索" />
              </template>
            </JcmButton>
          </div>
        </el-row>
      </el-form>
    </el-card>

    <el-row>
      <el-col :span="24">
        <div class="card-header-style">
          <div class="card-header">
            <span>${functionName}列表</span>
          </div>
          <div class="card-end">
            <JcmButton :buttonBgColor="layoutSettingStore.getTheme" @click="exportData()">
              <template #icon>
                <svg-icon name="导出excel"  />
              </template>
            </JcmButton>
            <JcmButton :buttonBgColor="layoutSettingStore.getTheme" @click="${businessName}AddFromModal?.open()">
              <template #icon>
                <svg-icon name="加号" />
              </template>
            </JcmButton>
            <JcmButton :buttonBgColor="layoutSettingStore.getTheme" @click="deleteItems()">
              <template #icon>
                <svg-icon name="垃圾桶" />
              </template>
            </JcmButton>
          </div>
        </div>
      </el-col>
    </el-row>


    <el-card class="card-table-style" >
      <el-table :data="${className}Store.dataList.list" table-layout="auto" @selection-change="handleSelectionChange">
        <el-table-column type="selection" width="55" align="center" />
          #foreach($column in $columns)
              #set($javaField=$column.javaField)
              #set($parentheseIndex=$column.columnComment.indexOf("（"))
              #if($parentheseIndex != -1)
                  #set($comment=$column.columnComment.substring(0, $parentheseIndex))
              #else
                  #set($comment=$column.columnComment)
              #end
              #if($column.pk)
                <el-table-column label="${comment}" align="center" prop="${javaField}" />
              #elseif($column.list && $column.htmlType == "datetime")
                <el-table-column label="${comment}" align="center" prop="${javaField}" width="180">
                  <template #default="scope">
                    <span>{{ scope.row.${javaField} }}</span>
                  </template>
                </el-table-column>
              #elseif($column.list && $column.htmlType == "imageUpload")
                <el-table-column label="${comment}" align="center" prop="${javaField}" width="100">
                  <template #default="scope">
                    <image-preview :src="scope.row.${javaField}" :width="50" :height="50"/>
                  </template>
                </el-table-column>
              #elseif($column.list && "" != $javaField)
                <el-table-column label="${comment}" align="center" prop="${javaField}" />
              #end
          #end

        <el-table-column align="center" label="操作">
          <template #default="scope">
            <el-button size="small" type="primary" @click="${businessName}UpdateFromModal?.open(scope.row)" text>
              编辑
            </el-button>
            <el-button size="small" type="primary" @click="deleteItem(scope.row)" text>
              删除
            </el-button>
          </template>
        </el-table-column>
      </el-table>
      <template #footer>
        <div class="pagination-style">
          <!--分页-->
          <el-pagination :page-sizes="[10, 20, 30, 40]" small="small" background="true"
                         :default-page-size="Number(layoutSettingStore.setting.size)"
                         layout="total, sizes, prev, pager, next, jumper" :total="${className}Store.dataList.total"
                         @size-change="handleSizeChange" @current-change="handleCurrentChange" />
        </div>
      </template>
    </el-card>

    <${BusinessName}AddFromModal ref="${businessName}AddFromModal"></${BusinessName}AddFromModal>
    <${BusinessName}UpdateFromModal ref="${businessName}UpdateFromModal"></${BusinessName}UpdateFromModal>
  </div>
</template>

<script setup lang="ts">
import type { FormInstance } from 'element-plus'
import type { FromModal } from '@/utils/commonType'
import API_ENUM from '@/enum/api-enum'
//弹出窗
import ${BusinessName}AddFromModal from './components/${businessName}-add-from-modal.vue'
import ${BusinessName}UpdateFromModal from './components/${businessName}-update-from-modal.vue'
//仓库
import useDictDataStore from '@/store/modules/acl/dictData'
import useLayoutSettingStore from '@/store/modules/layout/layoutSetting'
import use${ClassName}Store from '@/store/modules/${moduleName}/${businessName}'

const dictDataStore = useDictDataStore()
const layoutSettingStore = useLayoutSettingStore();
const ${className}Store = use${ClassName}Store();

//${businessName}弹出窗对象
const ${businessName}AddFromModal = ref<FromModal>()
const ${businessName}UpdateFromModal = ref<FromModal>()

//获取当前组件实例
const instance = getCurrentInstance();
//表单对象
const searchFormRef = ref<FormInstance>();

onMounted(() => {
  const searchForm = ${className}Store.searchForm;
  instance?.proxy?.$resetObj(searchForm);
  //进入页面初始化的数据 手动触发更新页数的逻辑
  handleSizeChange(Number(layoutSettingStore.setting.size));

  //初始化字典数据
  loadDictData()
})


//页码变更触发的方法
const handleCurrentChange = (currentPage: number) => {
  ${className}Store.dataList.page = currentPage
  refresh();
}

//页数切换触发的事件
const handleSizeChange = (pageSize: number) => {
  ${className}Store.dataList.size = pageSize
  refresh();
}

//选中数据触发的事件
const handleSelectionChange = (val: []) => {
   ${className}Store.multipleSelection = val
}

//删除${className}触发的事件
const deleteItem = (item: any) => {
        ${className}Store
      .del(item.${pkColumn.javaField})
      .then(() => {
        refresh();
      })
}

//删除多个${className}触发的事件
const deleteItems = () => {
  if(${className}Store.multipleSelection.length == 0){
    ElMessage.warning({ message: '请选择要删除的数据' })
    return;
  }
  const ${pkColumn.javaField}s = ${className}Store.multipleSelection.map((item: any) => item.${pkColumn.javaField}).join(',');
  ${className}Store.del(${pkColumn.javaField}s).then(() => {
    refresh();
  })
}

//刷新数据方法
const refresh = () => {
  const searchQuery = ${className}Store.searchForm;
  const page = ${className}Store.dataList.page;
  const size =  ${className}Store.dataList.size;
  (instance?.proxy as any).$addPage(searchQuery,page,size);
  ${className}Store.list(searchQuery);
}

//导出操作日志数据
const exportData = () => {
  const searchQuery=${className}Store.searchForm;
  const url = `${apiEnum}/export`;
  (instance?.proxy as any).$download(url, {
    ...searchQuery,
  },`${businessName}_#[[${new Date().getTime()}]]#.xlsx`);
}

//加载所需要的字典数据
const loadDictData = () => {
  const dictNamesStr = '#foreach($column in $columns)#if("" != $column.dictType)$column.dictType,#end#end';
  const dictNames = dictNamesStr.substring(0,dictNamesStr.length-1).split(",");
  dictDataStore
      .dictDataInfoList(dictNames)
      .then((resp) => {
         ${className}Store.dictData = resp.data
      })
      .catch((error) => {
        ElMessage.error({ message: error })
      })
}
//根据名称加载字典数据
const loadDictDataByName = (name:string) => {
  return ${className}Store.dictData.filter((item: any) => item.name === name)
}
//重置搜索表单
const resetSearchForm = (ruleFormRef: any) => {
  if (!ruleFormRef) return
  ruleFormRef.resetFields()
}
</script>
<script lang="ts">
  export default {
    name: '${businessName}',
  }
</script>
<style scoped></style>